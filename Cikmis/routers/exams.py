# routers/exams.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List

import database
import crud
import schemas

router = APIRouter(
    prefix="/exams",
    tags=["Exams"]
)

# VeritabanÄ± baÄŸlantÄ±sÄ±
get_db = database.get_db

# ğŸ“Œ 1. Ãœniversite listesini getir
@router.get("/universities", response_model=List[schemas.University])
def get_universities(db: Session = Depends(get_db)):
    return crud.get_universities(db)

# ğŸ“Œ 2. SeÃ§ilen Ã¼niversitenin bÃ¶lÃ¼mlerini getir
@router.get("/universities/{university_id}/departments", response_model=List[schemas.Department])
def get_departments(university_id: int, db: Session = Depends(get_db)):
    return crud.get_departments_by_university(db, university_id)

# ğŸ“Œ 3. SeÃ§ilen bÃ¶lÃ¼mÃ¼n sÄ±nÄ±flarÄ±nÄ± getir
@router.get("/departments/{department_id}/classes", response_model=List[schemas.ClassLevel])
def get_classes(department_id: int, db: Session = Depends(get_db)):
    return crud.get_classes_by_department(db, department_id)

# ğŸ“Œ 4. Belirli Ã¼niversite, bÃ¶lÃ¼m, sÄ±nÄ±f, yÄ±l ve dÃ¶neme gÃ¶re sÄ±navlarÄ± getir
@router.get("/", response_model=List[schemas.Exam])
def get_filtered_exams(
    university_id: int,
    department_id: int,
    class_level: int,
    year: int,
    semester: str,
    db: Session = Depends(get_db)
):
    exams = crud.get_exams_filtered(db, university_id, department_id, class_level, year, semester)
    if not exams:
        raise HTTPException(status_code=404, detail="No exams found for the selected filters.")
    return exams

# ğŸ“Œ 5. SeÃ§ilen sÄ±navÄ±n sorularÄ±nÄ± getir
@router.get("/{exam_id}/questions", response_model=List[schemas.Question])
def get_questions_by_exam(exam_id: int, db: Session = Depends(get_db)):
    questions = crud.get_questions_by_exam(db, exam_id)
    if not questions:
        raise HTTPException(status_code=404, detail="No questions found for this exam.")
    return questions